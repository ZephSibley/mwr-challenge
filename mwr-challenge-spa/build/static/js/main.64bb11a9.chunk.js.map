{"version":3,"sources":["tools/apiFetch.js","tools/debounce.js","tools/normaliseStockData.js","components/DataProvider.js","components/StockChart.js","App.js","serviceWorker.js","index.js"],"names":["apiFetch","apiFunction","keywords","Promise","resolve","reject","fetch","then","response","console","log","status","json","data","Note","debounce","a","b","c","d","e","f","this","g","arguments","clearTimeout","setTimeout","apply","normaliseStockData","stockData","chartData","dates","Object","keys","i","length","push","date","reverse","DataProvider","state","searchResults","errorMessage","chartDataLoaded","stockSelection","handleStockSearch","event","target","value","_this","setState","catch","error","handleStockSelection","id","matches","_this2","_this$state","bestMatches","map","match","react_default","createElement","key","onClick","props","render","className","type","placeholder","onChange","Component","StockChart","timeFrameSpecified","newTimeFrame","restart","window","location","reload","viewSelection","timeSelection","slice","_this$props","ResponsiveContainer","width","height","LineChart","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Legend","Line","name","stroke","activeDot","r","App","components_DataProvider","components_StockChart","Boolean","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRA0BeA,MAtBf,SAAmBC,EAAaC,GAC5B,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAC9BC,MAAM,8CAAgDL,EAAcC,EAAW,4BAC1EK,KAAK,SAAAC,GAEF,OADAC,QAAQC,IAAIF,EAASG,QACG,MAApBH,EAASG,OACF,oCAEJH,EAASI,SAEnBL,KAAK,SAAAM,GACEA,EAAKC,KACLT,EAAO,iFACAQ,EAAK,iBACZR,EAAO,6CAEPD,EAAQS,QCPjBE,MAbf,SAAkBC,EAAGC,EAAGC,GACpB,IAAIC,EAAGC,EACP,OAAO,WAKH,IAAIC,EAAIC,KACJC,EAAIC,UACR,OAAQC,aAAaN,GAAIA,EAAIO,WAN7B,WACIP,EAAI,KACAD,IAAGE,EAAIJ,EAAEW,MAAMN,EAAGE,KAIiBN,GAAIC,IAAMC,IAAMC,EAAIJ,EAAEW,MAAMN,EAAGE,IAAKH,ICKxEQ,MAbf,SAA6BC,EAAWC,GAKpC,IAFA,IAAIC,EAAQC,OAAOC,KAAKJ,EAAU,wBAE1BK,EAAE,EAAGA,EAAEH,EAAMI,OAAQD,IACzBJ,EAAUM,KAAKP,EAAU,uBAAuBE,EAAMG,KACtDJ,EAAUI,GAAGG,KAAON,EAAMG,GAG9B,OADAJ,EAAUQ,UACHR,GC0DIS,6MA9DXC,MAAQ,CACJC,cAAe,KACfC,aAAc,GACdZ,UAAW,KACXa,iBAAiB,EACjBC,eAAgB,MAGpBC,kBAAoB,SAACC,GACjB/B,EACIf,EAAS,0BAA2B8C,EAAMC,OAAOC,OAChDzC,KAAK,SAACM,GAAWoC,EAAKC,SAAS,CAAET,cAAe5B,MAChDsC,MAAM,SAACC,GAAYH,EAAKC,SAAS,CAAER,aAAcU,MACpD,SAGNC,qBAAuB,SAACP,GACpBG,EAAKC,SAAS,CAACN,eAAgBE,EAAMC,OAAOO,KAC5CtD,EAAS,4BAA6B8C,EAAMC,OAAOO,IAClD/C,KAAK,SAACM,GACH,IAAIiB,EAAY,GAChBF,EAAmBf,EAAMiB,GACzBmB,EAAKC,SAAS,CAAEpB,UAAWA,EAAWa,iBAAiB,MAE1DQ,MAAM,SAACC,GAAYH,EAAKC,SAAS,CAAER,aAAcU,+EAI7C,IAIDG,EAJCC,EAAAlC,KAAAmC,EAC8EnC,KAAKkB,MAAhFC,EADHgB,EACGhB,cAAeX,EADlB2B,EACkB3B,UAAWa,EAD7Bc,EAC6Bd,gBAAiBC,EAD9Ca,EAC8Cb,eAAgBF,EAD9De,EAC8Df,aAkBnE,OAdID,IACAc,EAAUd,EAAciB,YAAYC,IAChC,SAACC,GAAD,OACIC,EAAA7C,EAAA8C,cAAA,UACIR,GAAIM,EAAM,aACVG,IAAKH,EAAM,aACXI,QAASR,EAAKH,sBAEbO,EAAM,WALX,KAKyBA,EAAM,aAL/B,QAWLjB,EAAkBrB,KAAK2C,MAAMC,OAAOpC,EAAWc,GAClDiB,EAAA7C,EAAA8C,cAAA,OAAKK,UAAU,oBACXN,EAAA7C,EAAA8C,cAAA,iDACAD,EAAA7C,EAAA8C,cAAA,SACIM,KAAK,OACLC,YAAY,YACZC,SAAUhD,KAAKuB,oBAElBH,EAAemB,EAAA7C,EAAA8C,cAAA,SAAIpB,GAAoBa,UAzD7BgB,qFC+DZC,6MAxDXhC,MAAQ,CACJiC,oBAAoB,EACpBC,aAAc,MAGlBC,QAAU,WACNC,OAAOC,SAASC,YAGpBC,cAAgB,SAACjC,GACb,GAAKA,EAAMC,OAAOC,MAEX,CACH,IAAIgC,EAAgB/B,EAAKgB,MAAMnC,UAAUmD,MAAMnC,EAAMC,OAAOC,OAC5DC,EAAKC,SAAS,CAAEuB,oBAAoB,EAAMC,aAAcM,SAHxD/B,EAAKC,SAAS,CAACuB,oBAAmB,6EASjC,IAAAhB,EACoCnC,KAAKkB,MAAzCiC,EADAhB,EACAgB,mBAAoBC,EADpBjB,EACoBiB,aADpBQ,EAE6B5D,KAAK2C,MAAlCnC,EAFAoD,EAEApD,UAAWc,EAFXsC,EAEWtC,eAEhB,OACIiB,EAAA7C,EAAA8C,cAAA,OAAKK,UAAU,yBACXN,EAAA7C,EAAA8C,cAACqB,EAAA,EAAD,CAAqBC,MAAM,MAAMC,OAAQ,KACrCxB,EAAA7C,EAAA8C,cAACwB,EAAA,EAAD,CAAWzE,KAAM4D,EAAqBC,EAAe5C,GACjD+B,EAAA7C,EAAA8C,cAACyB,EAAA,EAAD,CAAOC,QAAQ,SACf3B,EAAA7C,EAAA8C,cAAC2B,EAAA,EAAD,MACA5B,EAAA7C,EAAA8C,cAAC4B,EAAA,EAAD,CAAeC,gBAAgB,QAC/B9B,EAAA7C,EAAA8C,cAAC8B,EAAA,EAAD,MACA/B,EAAA7C,EAAA8C,cAAC+B,EAAA,EAAD,MACAhC,EAAA7C,EAAA8C,cAACgC,EAAA,EAAD,CACIC,KAAMnD,EACN4C,QAAQ,WACRpB,KAAK,WACL4B,OAAO,UACPC,UAAW,CAACC,EAAG,OAI3BrC,EAAA7C,EAAA8C,cAAA,WACID,EAAA7C,EAAA8C,cAAA,UAAQd,MAAM,GAAGgB,QAAS1C,KAAKyD,eAA/B,aACAlB,EAAA7C,EAAA8C,cAAA,UAAQd,MAAM,MAAMgB,QAAS1C,KAAKyD,eAAlC,eACAlB,EAAA7C,EAAA8C,cAAA,UAAQd,MAAM,MAAMgB,QAAS1C,KAAKyD,eAAlC,gBAEJlB,EAAA7C,EAAA8C,cAAA,WACID,EAAA7C,EAAA8C,cAAA,UAAQE,QAAS1C,KAAKqD,SAAtB,wBAvDKJ,aCYV4B,mLAVX,OACEtC,EAAA7C,EAAA8C,cAACsC,EAAD,CACElC,OAAQ,SAACpC,EAAWc,GAAZ,OACNiB,EAAA7C,EAAA8C,cAACuC,EAAD,CAAYvE,UAAWA,EAAWc,eAAgBA,cAL1C2B,aCOE+B,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAAS3C,MACvB,2DCZN4C,IAAStC,OAAOL,EAAA7C,EAAA8C,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvG,KAAK,SAAAwG,GACjCA,EAAaC","file":"static/js/main.64bb11a9.chunk.js","sourcesContent":["\r\n// Takes required API parameters and a keyword (e.g. \"TIME_SERIES_DAILY&symbol=\" and \"MSFT\") and builds them into a query\r\n// See https://www.alphavantage.co/documentation/ for further details\r\n\r\nfunction apiFetch (apiFunction, keywords) {\r\n    return new Promise(function (resolve, reject) {\r\n            fetch(\"https://www.alphavantage.co/query?function=\" + apiFunction + keywords + \"&apikey=\" + process.env.REACT_APP_API_KEY)\r\n                .then(response => {\r\n                    console.log(response.status)\r\n                    if (response.status !== 200) {\r\n                        return \"Something went wrong with the API\"\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    if (data.Note) { // The API responds with 200 instead of the appropriate response code for call limiting, so as a workaround this detects the response note\r\n                        reject(\"Sorry, we've hit the API call limit, please refresh and try again in a minute\")\r\n                    } else if (data[\"Error Message\"]) { // Again, the API still responds with 200 even if you make an invalid call\r\n                        reject(\"Please enter a valid name or stock symbol\")\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                })\r\n   });\r\n}\r\n\r\nexport default apiFetch;","function debounce(a, b, c) {\r\n    var d, e;\r\n    return function() {\r\n        function h() {\r\n            d = null;\r\n            if(!c) e = a.apply(f, g);\r\n        }\r\n        var f = this,\r\n            g = arguments;\r\n        return (clearTimeout(d), d = setTimeout(h, b), c && !d && (e = a.apply(f, g)), e);\r\n    };\r\n}\r\n\r\nexport default debounce","\r\nfunction normaliseStockData (stockData, chartData) {\r\n    \r\n    // Example data: { \"Meta Data\": {(METADATA)}, \"Time Series (Daily)\": { \"2019-01-15\": {\"1. open\": \"102.5100\", \"2. high\": \"105.0500\", \"3. low\": \"101.8800\", \"4. close\": \"105.0100\",\"5. volume\": \"31537108\"}, \"2019-01-15\":...\r\n    let dates = Object.keys(stockData[\"Time Series (Daily)\"]); \r\n\r\n    for(let i=0; i<dates.length; i++) {\r\n        chartData.push(stockData[\"Time Series (Daily)\"][dates[i]]); // pushes each object by iterating through the dates array, calling each key \r\n        chartData[i].date = dates[i]; // Puts each datestamp key into it's corresponding object\r\n    };\r\n    chartData.reverse(); // Now latest to earliest\r\n    return chartData\r\n};\r\n\r\nexport default normaliseStockData;","import React, { Component } from \"react\";\r\nimport apiFetch from \"../tools/apiFetch\";\r\nimport debounce from \"../tools/debounce\";\r\nimport normaliseStockData from \"../tools/normaliseStockData\";\r\n\r\nclass DataProvider extends Component {\r\n\r\n    state = {\r\n        searchResults: null,\r\n        errorMessage: \"\",\r\n        chartData: null,\r\n        chartDataLoaded: false,\r\n        stockSelection: \"\",\r\n    }\r\n\r\n    handleStockSearch = (event) => {\r\n        debounce(  //On a timer to prevent overcalling the API\r\n            apiFetch(\"SYMBOL_SEARCH&keywords=\", event.target.value)\r\n            .then((data) => { this.setState({ searchResults: data }) })\r\n            .catch((error) => { this.setState({ errorMessage: error }) })\r\n        , 15000);\r\n    };\r\n\r\n    handleStockSelection = (event) => {\r\n        this.setState({stockSelection: event.target.id})\r\n        apiFetch(\"TIME_SERIES_DAILY&symbol=\", event.target.id)\r\n        .then((data) => { \r\n            let chartData = [];\r\n            normaliseStockData(data, chartData)\r\n            this.setState({ chartData: chartData, chartDataLoaded: true }) \r\n        })\r\n        .catch((error) => { this.setState({ errorMessage: error }) });   \r\n    };\r\n\r\n\r\n    render() {\r\n        const { searchResults, chartData, chartDataLoaded, stockSelection, errorMessage} = this.state;\r\n        \r\n        // Assigns the search results to html elements\r\n        let matches\r\n        if (searchResults) {\r\n            matches = searchResults.bestMatches.map(\r\n                (match) => \r\n                    <button \r\n                        id={match[\"1. symbol\"]} \r\n                        key={match[\"1. symbol\"]}  // Unfortunately there are no entirely unique keys to use, but this is closest option.\r\n                        onClick={this.handleStockSelection} \r\n                    > \r\n                        {match[\"2. name\"]} ({match[\"1. symbol\"]}) \r\n                    </button> \r\n            )\r\n        }\r\n\r\n        // Once a selection is made and chart data is loaded, will render StockChart as a renderprop (passing in the data)\r\n        return chartDataLoaded ? this.props.render(chartData, stockSelection) : (\r\n            <div className=\"search-container\" >\r\n                <p>Which stock would you like to view? </p>\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"Microsoft\" \r\n                    onChange={this.handleStockSearch}\r\n                />\r\n                {errorMessage ? <p>{errorMessage}</p> : matches}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default DataProvider;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n\r\nclass StockChart extends Component {\r\n\r\n    static propTypes = {\r\n        chartData: PropTypes.array.isRequired,\r\n        stockSelection: PropTypes.string.isRequired\r\n    }\r\n\r\n    state = {\r\n        timeFrameSpecified: false,\r\n        newTimeFrame: []\r\n    }\r\n\r\n    restart = () => {\r\n        window.location.reload();\r\n    };\r\n\r\n    viewSelection = (event) => {\r\n        if (!event.target.value) {\r\n            this.setState({timeFrameSpecified:false});\r\n        } else {\r\n            let timeSelection = this.props.chartData.slice(event.target.value) \r\n            this.setState({ timeFrameSpecified: true, newTimeFrame: timeSelection })\r\n        } // The timeframes are in market working days, rather than being strictly chronological.    \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        var {timeFrameSpecified, newTimeFrame} = this.state;\r\n        var {chartData, stockSelection} = this.props;\r\n\r\n        return (\r\n            <div className=\"stock-chart-container\" >\r\n                <ResponsiveContainer width=\"80%\" height={600} >\r\n                    <LineChart data={timeFrameSpecified ? newTimeFrame : chartData} > \r\n                        <XAxis dataKey=\"date\"/>\r\n                        <YAxis/>\r\n                        <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                        <Tooltip/>\r\n                        <Legend />\r\n                        <Line \r\n                            name={stockSelection} \r\n                            dataKey=\"4. close\" \r\n                            type=\"monotone\" \r\n                            stroke=\"#8884d8\" \r\n                            activeDot={{r: 1}}\r\n                        />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n                <div>\r\n                    <button value=\"\" onClick={this.viewSelection}>Full View</button>\r\n                    <button value=\"-30\" onClick={this.viewSelection}>30 Day View</button>\r\n                    <button value=\"-10\" onClick={this.viewSelection}>10 Day View</button>\r\n                </div>\r\n                <div>\r\n                    <button onClick={this.restart}>Start Again</button> \r\n                </div>\r\n            </div>\r\n        ) \r\n        \r\n    };\r\n};\r\n\r\nexport default StockChart;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport DataProvider from './components/DataProvider';\r\nimport StockChart from './components/StockChart';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <DataProvider \r\n        render={(chartData, stockSelection) => (\r\n          <StockChart chartData={chartData} stockSelection={stockSelection} />\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}